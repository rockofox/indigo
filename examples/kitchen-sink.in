# This tries to test all/most features of the language

import * from examples.test2

println :: String -> IO
println s = do
  print s
  print "\n"
end

printPairs :: List{Int} -> IO
printPairs [] = do
  println "Done"
end
printPairs (x:y:xs) = do
  print (^x) : " " : (^y) : "\n"
  printPairs xs
end

fact :: Int -> Int
fact n = do
  if n == 0 then do
    1
  else do
    n * fact ((n) - 1)
  end
end

addOne :: Int -> Int
addOne n = n + 1.0

add :: Int -> Int -> Int
add x y = x + y

call :: Fn {Int -> Int => Int} -> IO
call f = do
  println (f 10)
end

# Equation for the upper hemisphere of the unit circle
circle :: Float -> Float
circle x = sqrt (abs(1.0 - x**2.0))

# Calculate the area of a right-handed Riemann rectangle

area :: Float -> Float -> Float
area x1 x2 = ((x2) - x1) * circle x2

# Recursively add the areas of the Riemann rectangles
estimate :: Any -> Float
estimate (x:[]) = 0.0
estimate (x:y:xs) = (area x, y) + estimate (y:xs)

range :: Int -> Int -> List{Int}
range a b = do
  if a == b then do
    []
  else do
    a : range (a + 1.0), b
  end
end

struct Point = (x: Int, y: Int)

main => IO = do
  # let n = 4000.0
  # let rsum = estimate (map (divide n), (range 1.0, n))
  # let pi = 4.0 * rsum
  # let r = range 1.0, n
  # println _/2
  println (map (`/`2.0), (range 1.0, 10.0))
  println examples.test2.bla 2, 4
  let p = Point { x : 1, y : 2 }
  println p.x
  # println "Hello, world!"
end
