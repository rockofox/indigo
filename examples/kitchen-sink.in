# vi: ft=ruby
# This tries to test all/most features of the language

import * from examples.test2

printPairs :: List{Int} -> IO
printPairs [] = do
  println "Done"
end
printPairs (x:y:xs) = do
  print (^x) : " " : (^y) : "\n"
  printPairs xs
end

fact :: Int -> Int
fact n = do
  if n == 0 then do
    1
  else do
    n * fact ((n) - 1)
  end
end

addOne :: Int -> Int
addOne n = n + 1.0

add :: Int -> Int -> Int
add x y = x + y

call :: Fn {Int -> Int => Int} -> IO
call f = do
  println (f 10)
end




struct Point = (x: Int, y: Int)

bla x y = x + y

something :: Int -> Int -> Int
something x y = x + y

something :: Float -> Float -> Float
something x y = x * y

println :: Point -> IO
println p = do
  print p . x : " " : p . y : "\n"
end

ppp :: Int -> Int -> Int
ppp x y = do
  println x
  println y
  println "----"
  x + y
end

mySum :: List{Float} -> Float
mySum [] = 0.0
mySum (x:xs) = x + mySum xs

main => IO = do
  # let blalbl = foldl (ppp), 0.0, [2.0,4.0,8.0]
  # println blalbl
  # println (mySum [2.0,4.0,8.0])
end

trait Foo = { show :: Any -> String }
