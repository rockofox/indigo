# # let split ([]: String sep: String) => [String] = [""]
# # let split ((c:cs): String sep: String) => [String] = do
# #     let rest = split cs, sep
# #     if c == sep then do
# #         "" : (split cs, sep)
# #     else do
# #         (c : (head rest)) : (tail rest)
# #     end
# # end
# trait Number
# impl Number for Int
# impl Number for Float
#
# # let add<N: Number> (a: N b: N) => N = a + b
#
# let split<T> ([]: [T] sep: T) => [T] = [""]
#
# let printNumList<N: Number> (l: [N] n: N) => IO = do
#     
# end
#
# let xxx (a: Int) => Int = a
#
#
# struct Child = (name: String, age: Int) satisfies (it.age < 18)
# let a+ (a: Int b: Int) => Int = a
# let main => IO = do
#     println 1 a+ 2
#     # println Child {name: "John", age: 13}
#     # println Child {name: "Abram", age: 20}
# end

# `+` :: Int -> Int -> Int
# struct Cat = (name: String, age: Int)
# # let + (a: Cat b: Cat) => Cat = Cat {name: a.name : b.name, age: a.age + b.age}
# # let add (a: Int b: Int) => Int = a + b
# # let add (a: Float b: Float) => Float = a - b
# add :: Int -> Int -> Int
# add a b = a + b
# let main => IO = println add 3.0, 4.0
2+5
