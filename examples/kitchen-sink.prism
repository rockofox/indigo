# # This tries to test all/most features of the language

println :: String -> IO
println s = do
  print s
  print "\n"
end

printPairs :: List{Int} -> IO
printPairs [] = do
  println "Done"
end
printPairs (x:y:xs) = do
  print (^x) : " " : (^y) : "\n"
  printPairs xs
end

fact :: Int -> Int
fact n = do
  if n == 0 then do
    1
  else do
    n * fact ((n) - 1)
  end
end

addOne :: Int -> Int
addOne n = n + 1

add :: Int -> Int -> Int
add x y = x + y

map :: Fn {Any -> Any => Any} -> List{Any} -> List{Any}
map f [] = []
map f (x:xs) = (f x) : map f, xs

call :: Fn {Int -> Int => Int} -> IO
call f = do
  println (f 10)
end

main => IO = do
  # printPairs [1,2,3,4]
  # println fact 20
  println (map (add 2), [1,2,3])
  # println (argOrderTest 10, 5)
  # call addOne
end