# extern runtime internal_add :: Int -> Int => Int
# extern runtime internal_sub :: Int -> Int => Int
# extern runtime internal_mul :: Int -> Int => Int
# extern runtime internal_div :: Int -> Int => Int
# extern runtime internal_pow :: Int -> Int => Int
# extern runtime internal_eq  :: Int -> Int => Bool

# add x: Int -> y: Int => Int = internal_add x, y
# sub x: Int -> y: Int => Int = internal_sub x, y
# mul x: Int -> y: Int => Int = internal_mul x, y
# div x: Int -> y: Int => Int = internal_div x, y
# pow x: Int -> y: Int => Int = internal_pow x, y
# eq  x: Int -> y: Int => Bool = internal_eq x, y

# extern runtime internal_add :: Float -> Float => Float
# extern runtime internal_sub :: Float -> Float => Float
# extern runtime internal_mul :: Float -> Float => Float
# extern runtime internal_div :: Float -> Float => Float
# extern runtime internal_pow :: Float -> Float => Float
# extern runtime internal_eq  :: Float -> Float => Bool

# add x: Float -> y: Float => Float = internal_add x, y
# sub x: Float -> y: Float => Float = internal_sub x, y
# mul x: Float -> y: Float => Float = internal_mul x, y
# div x: Float -> y: Float => Float = internal_div x, y
# pow x: Float -> y: Float => Float = internal_pow x, y
# eq  x: Float -> y: Float => Bool  = internal_eq  x, y
`+` :: Any -> Any -> Any
`+` x y = x + y
`-` :: Any -> Any -> Any
`-` x y = (x) - y
`*` :: Any -> Any -> Any
`*` x y = x * y
`/` :: Any -> Any -> Any
`/` x y = x / y

flip f: Fn{Any -> Any => Any} -> x: Any -> y: Any => Fn{Any -> Any => Any} = f y, x

map :: Fn{Any => Any} -> List{Any} -> List{Any}
map fun [] = []
map fun (x:xs) = (fun x) : (map fun, xs)

filter :: Fn{Any => Bool} -> List{Any} -> List{Any}
filter fun [] = []
filter fun (x:xs) = do
    if fun x then
        x : (filter fun, xs)
    else
        filter fun, xs
end

foldl :: Fn{Any -> Any => Any} -> Any -> List{Any} -> Any
foldl fun acc [] = acc
foldl fun acc (x:xs) = foldl fun, (fun acc, x), xs

foldr :: Fn{Any -> Any => Any} -> Any -> List{Any} -> Any
foldr fun acc [] = acc
foldr fun acc (x:xs) = fun x, (foldr fun, acc, xs)

sum :: List{Any} -> Int
sum xs = foldl add, 0.0, xs