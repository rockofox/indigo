struct IO = (inner: Any)

trait Optional
struct Some = (value: Any) is Optional
struct None = () is Optional

maybe :: Any -> Optional -> Any
maybe x Some{value: y} = y
maybe x None{} = x

# `+` :: Any -> Any -> Any
# `+` x y = x + y
# `-` :: Any -> Any -> Any
# `-` x y = (x) - y
# `*` :: Any -> Any -> Any
# `*` x y = x * y
# `/` :: Any -> Any -> Any
# `/` x y = x / y
# `<` :: Any -> Any -> Any
# `<` x y = x < y
# `>` :: Any -> Any -> Any
# `>` x y = x > y
# `<=` :: Any -> Any -> Any
# `<=` x y = x <= y
# `>=` :: Any -> Any -> Any
# `>=` x y = x >= y
# `==` :: Any -> Any -> Any
# `==` x y = x == y
# `!=` :: Any -> Any -> Any
# `!=` x y = x != y
# `&&` :: Any -> Any -> Any
# `&&` x y = x && y
# `||` :: Any -> Any -> Any
# `||` x y = x || y
# `%` :: Any -> Any -> Any
# `%` x y = x % y
# `!` :: Any -> Any
# `!` x = !x
let + (x: Int y: Int) => Int = unsafeAdd x, y
let - (x: Int y: Int) => Int = unsafeSub x, y
let * (x: Int y: Int) => Int = unsafeMul x, y
let / (x: Int y: Int) => Int = unsafeDiv x, y
let `<` (x: Int y: Int) => Int = unsafeLt x, y
let `>` (x: Int y: Int) => Int = unsafeGt x, y
let `<=` (x: Int y: Int) => Int = unsafeLe x, y
let `>=` (x: Int y: Int) => Int = unsafeGe x, y
let == (x: Int y: Int) => Int = unsafeEq x, y
let != (x: Int y: Int) => Int = unsafeNe x, y
let && (x: Int y: Int) => Int = unsafeAnd x, y
let || (x: Int y: Int) => Int = unsafeOr x, y
let % (x: Int y: Int) => Int = unsafeMod x, y

let flip f: Fn{Any -> Any => Any} -> x: Any -> y: Any => Fn{Any -> Any => Any} = f y, x

map :: Fn{Any => Any} -> [Any] -> [Any]
map fun [] = []
map fun (x:xs) = (fun x) : (map fun, xs)

mapM :: Fn{Any => IO} -> [Any] -> IO
mapM fun [] = []
mapM fun (x:xs) = do
    fun x
    mapM fun, xs
end

filter :: Fn{Any => Bool} -> [Any] -> [Any]
filter fun [] = []
filter fun (x:xs) = do
    if fun x then
        x : (filter fun, xs)
    else
        filter fun, xs
end

foldl :: Fn{Any -> Any => Any} -> Any -> [Any] -> Any
foldl fun acc [] = acc
foldl fun acc (x:xs) = foldl (fun), (fun acc, x), xs

foldr :: Fn{Any -> Any => Any} -> Any -> [Any] -> Any
foldr fun acc [] = acc
foldr fun acc (x:xs) = fun x, (foldr fun, acc, xs)

add x y = x + y

sum :: [Int] -> Int
sum [] = 0
sum (x:xs) = x + sum xs

sum :: [Float] -> Float
sum [] = 0.0
sum (x:xs) = x + sum xs

print :: Any -> IO
print s = do
  unsafePrint s
end

println :: Any -> IO
println s = do
  print s
  print "\n"
end

getLine :: IO
getLine _ = do
  unsafeGetLine
end

getChar :: IO
getChar _ = do
  unsafeGetChar
end

max :: Any -> Any -> Any
max x y = do
  if x > y then do
    x
  else do
    y
  end
end

min :: Any -> Any -> Any
min x y = do
  if x < y then do
    x
  else do
    y
  end
end

let floor (x: Float) => Float = do
  if x < 0.0 then do
    (x + 0.5) as Int as Float
  else do
    ((x) - 0.5) as Int as Float
  end
end

randomFloat :: IO
randomFloat _ = do
  unsafeRandom
end

randomInt :: Int -> Int -> Int
randomInt a b = do
  let r = randomFloat
  (floor (r * ((((b) - a) + a) as Float))) as Int
end

range :: Any -> Any -> Any -> [Any]
range a b inc = do
  if a >= b then do
    []
  else do
    a : (range (a + inc), b, inc)
  end
end

sqrt :: Float -> Float
sqrt x = x ** 0.5

abs :: Float -> Float
abs x = do
  if x < 0.0 then do
    (-x)
  else do
    x
  end
end

cPtr :: Int -> CPtr
cPtr x = x as CPtr

cNullPtr :: CPtr
cNullPtr _ = 0 as CPtr

# timesM :: Int -> Fn{Int -> IO => IO} -> IO
# timesM n f = do
#   if n <= 0 then do
#   else do
#     f n
#     timesM (n - 1), f
#   end
# end
let times (n: Int f: Fn{Int => Any}) => Any = do
  if n < 0 then do
  else do
    f n
    times ((n) - 1), f
  end
end

let void (x: Any) => Any = _

let head ((x:xs): [Any]) => Any = x
let tail ((_:xs): [Any]) => [Any] = xs

compose :: Any -> Any -> Any
compose f g = \x -> f (g x)
