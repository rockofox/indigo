struct IO = (inner: Any)

`+` :: Any -> Any -> Any
`+` x y = x + y
`-` :: Any -> Any -> Any
`-` x y = (x) - y
`*` :: Any -> Any -> Any
`*` x y = x * y
`/` :: Any -> Any -> Any
`/` x y = x / y

let flip f: Fn{Any -> Any => Any} -> x: Any -> y: Any => Fn{Any -> Any => Any} = f y, x

map :: Fn{Any => Any} -> List{Any} -> List{Any}
map fun [] = []
map fun (x:xs) = (fun x) : (map fun, xs)

mapM :: Fn{Any => IO} -> List{Any} -> IO
mapM fun [] = []
mapM fun (x:xs) = do
    fun x
    mapM fun, xs
end

filter :: Fn{Any => Bool} -> List{Any} -> List{Any}
filter fun [] = []
filter fun (x:xs) = do
    if fun x then
        x : (filter fun, xs)
    else
        filter fun, xs
end

foldl :: Fn{Any -> Any => Any} -> Any -> List{Any} -> Any
foldl fun acc [] = acc
foldl fun acc (x:xs) = foldl (fun), (fun acc, x), xs

foldr :: Fn{Any -> Any => Any} -> Any -> List{Any} -> Any
foldr fun acc [] = acc
foldr fun acc (x:xs) = fun x, (foldr fun, acc, xs)

add x y = x + y

sum :: List{Int} -> Int
sum [] = 0
sum (x:xs) = x + sum xs

sum :: List{Float} -> Float
sum [] = 0.0
sum (x:xs) = x + sum xs

print :: Any -> IO
print s = do
  unsafePrint s
end

println :: Any -> IO
println s = do
  print s
  print "\n"
end

range :: Any -> Any -> Any -> List{Any}
range a b inc = do
  if a >= b then do
    []
  else do
    a : (range (a + inc), b, inc)
  end
end

sqrt :: Float -> Float
sqrt x = x ** 0.5

abs :: Float -> Float
abs x = do
  if x < 0.0 then do
    -x
  else do
    x
  end
end
